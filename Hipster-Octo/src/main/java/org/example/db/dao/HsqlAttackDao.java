package org.example.db.dao;



import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.example.db.Dao;
import org.example.db.DaoBase;
import org.example.db.EntityBase;
import org.example.db.HsqlUnitOfWork;
import org.example.list.Octo;
import org.example.list.Attack;

public class HsqlAttackDao extends DaoBase<Attack>  implements Dao<Attack>{

	
	private Statement stmt;
	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement getById;
	private PreparedStatement getAll;
	
	
	public HsqlAttackDao(HsqlUnitOfWork uow)
	{
		super(uow);
		try {
			Connection connection = uow.getConnection();
			stmt = connection.createStatement();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			
			boolean exists = false;
			while(rs.next())
			{
				if("attack".equalsIgnoreCase(rs.getString("TABLE_NAME")))
				{
					exists = true;
					break;
				}
			}
			
			insert = connection.prepareStatement(""
					+ "INSERT INTO attack(city,street, postalCode, houseNumber, localNumber)"
					+ " VALUES(?,?,?,?,?)");
			
			getById = connection.prepareStatement(""
					+ "SELECT * FROM product WHERE id=?");
			
			delete = connection.prepareStatement("DELETE FROM attack WHERE id=?");
			
			getAll = connection.prepareStatement("SELECT * FROM attack");
			
			update = connection.prepareStatement(""
					+ "update attack set"
					+ "(name,description)=(?,?)"
					+ "where id=?");
			
			if(!exists)
			{
				stmt.executeUpdate(""
						+ "CREATE TABLE attack("
						+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
						+ "city varchar(50),"
						+ "street varchar (50),"
						+ "postalCode varchar (50),"
						+ "houseNumber varchar (50),"
						+ "localNumber int (10),"
						+ ");");
				
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void persistAdd(EntityBase entity) {
		
		Attack ent = (Attack)entity;
		try {
			insert.setString(1, ent.getCity());
			insert.setString(2, ent.getStreet());
			insert.setString(3, ent.getPostalCode());
			insert.setString(4, ent.getHouseNumber());
			insert.setInt(5, ent.getLocalNumber());
			insert.setInt(6, ent.getId());
			insert.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void persistDelete(EntityBase entity) {
		Attack ent = (Attack) entity;
		try 
		{
			delete.setInt(1, ent.getId());
			delete.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public List<Attack> getAll() {
			List<Attack> attacks = new ArrayList<Attack>();
		
		try
		{
			ResultSet rs = getAll.executeQuery();
			while(rs.next()){
				
				Attack a = new Attack();
				a.setId(rs.getInt("id"));
				a.setCity(rs.getString("city"));
				a.setStreet(rs.getString("street"));
				a.setPostalCode(rs.getString("postalCode"));
				a.setHouseNumber(rs.getString("houseNumber"));
				a.setLocalNumber(rs.getInt("localNumber"));
				attacks.add(a);
			}
		}
		
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
		
		return attacks;
	}

	@Override
	public Attack get(int id) {
		Attack a = null;
		try {
			getById.setInt(1, id);
			ResultSet rs = getById.executeQuery();
			while(rs.next())
			{
				a = new Attack();
				
				a.setId(rs.getInt("id"));
				a.setCity(rs.getString("city"));
				a.setStreet(rs.getString("street"));
				a.setPostalCode(rs.getString("postalCode"));
				a.setHouseNumber(rs.getString("houseNumber"));
				a.setLocalNumber(rs.getInt("localNumber"));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return a;
	}

	@Override
	public void persistUpdate(EntityBase entity) {
		Attack ent = (Attack) entity;
		try
		{
			update.setString(1, ent.getCity());
			update.setString(2, ent.getStreet());
			update.setString(3, ent.getPostalCode());
			update.setString(4, ent.getHouseNumber());
			update.setInt(5, ent.getLocalNumber());
			update.setInt(6, ent.getId());
			update.executeUpdate();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
		
	}


	
	
}